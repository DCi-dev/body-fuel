// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Recipe          Recipe[]
  Review          Review[]
  FavoriteRecipes FavoriteRecipes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Recipe
model Ingredient {
  id            String @id @default(cuid())
  name          String
  quantity      Float
  Recipe        Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      String
  calories      Float?
  protein       Float?
  carbohydrates Float?
  fat           Float?
}

model Instructions {
  id       String @id @default(cuid())
  recipeId String
  Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  text     String
}

model Recipe {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  description     String
  servings        Int
  image           String?
  ingredients     Ingredient[]
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  calories        Float?
  protein         Float?
  carbohydrates   Float?
  fat             Float?
  reviews         Review[]
  categories      Category[]
  shared          Boolean?
  prepTime        String?
  cookTime        String?
  difficulty      String?
  instructions    Instructions[]
  FavoriteRecipes FavoriteRecipes[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

model FavoriteRecipes {
  id       String @id @default(cuid())
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

model Review {
  id       String @id @default(cuid())
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  stars    Int
  comments String
}
